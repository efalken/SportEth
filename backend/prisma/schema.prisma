// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TokenTransferEvent {
  blockNumber      Int
  transactionHash  String
  transactionIndex Int
  logIndex         Int
  from             String
  to               String
  value            BigInt

  @@id([blockNumber, transactionHash, transactionIndex, logIndex])
}

model TokenBurnEvent {
  blockNumber      Int
  transactionHash  String
  transactionIndex Int
  logIndex         Int
  from             String
  value            BigInt

  @@id([blockNumber, transactionHash, transactionIndex, logIndex])
}

model TokenMintEvent {
  blockNumber      Int
  transactionHash  String
  transactionIndex Int
  logIndex         Int
  from             String
  value            BigInt

  @@id([blockNumber, transactionHash, transactionIndex, logIndex])
}

model TokenApprovalEvent {
  blockNumber      Int
  transactionHash  String
  transactionIndex Int
  logIndex         Int
  owner            String
  spender          String
  value            BigInt

  @@id([blockNumber, transactionHash, transactionIndex, logIndex])
}

model BettingBetRecordEvent {
  blockNumber      Int
  transactionHash  String
  transactionIndex Int
  logIndex         Int
  bettor           String
  epoch            Int
  matchNum         Int
  pick             Int
  betAmount        Int
  payoff           Int
  contractHash     String

  @@id([blockNumber, transactionHash, transactionIndex, logIndex])
}

model BettingOfferRecordEvent {
  blockNumber      Int
  transactionHash  String
  transactionIndex Int
  logIndex         Int
  bettor           String
  epoch            Int
  matchNum         Int
  pick             Int
  betAmount        Int
  payoff           Int
  contractHash     String

  @@id([blockNumber, transactionHash, transactionIndex, logIndex])
}

model BettingFundingEvent {
  blockNumber      Int
  transactionHash  String
  transactionIndex Int
  logIndex         Int
  bettor           String
  epoch            Int
  moveAmount       BigInt
  action           Int

  @@id([blockNumber, transactionHash, transactionIndex, logIndex])
}

model OracleResultsPostedEvent {
  blockNumber      Int
  transactionHash  String
  transactionIndex Int
  logIndex         Int
  epoch            Int
  propnum          Int
  winner           Int[]

  @@id([blockNumber, transactionHash, transactionIndex, logIndex])
}

model OracleDecOddsPostedEvent {
  blockNumber      Int
  transactionHash  String
  transactionIndex Int
  logIndex         Int
  epoch            Int
  propnum          Int
  decOdds          Int[]

  @@id([blockNumber, transactionHash, transactionIndex, logIndex])
}

model OracleVoteOutcomeEvent {
  blockNumber      Int
  transactionHash  String
  transactionIndex Int
  logIndex         Int
  epoch            Int
  propnum          Int
  voteResult       Boolean
  yesvotes         Int
  novotes          Int

  @@id([blockNumber, transactionHash, transactionIndex, logIndex])
}

model OracleBetDataPostedEvent {
  blockNumber      Int
  transactionHash  String
  transactionIndex Int
  logIndex         Int
  epoch            Int
  propnum          Int
  oddsStart        Int[]

  @@id([blockNumber, transactionHash, transactionIndex, logIndex])
}

model OracleParamsPostedEvent {
  blockNumber      Int
  transactionHash  String
  transactionIndex Int
  logIndex         Int
  concLimit        Int

  @@id([blockNumber, transactionHash, transactionIndex, logIndex])
}

model OraclePausePostedEvent {
  blockNumber      Int
  transactionHash  String
  transactionIndex Int
  logIndex         Int
  pausedMatch1     Int
  pausedMatch2     Int

  @@id([blockNumber, transactionHash, transactionIndex, logIndex])
}

model OracleStartTimesPostedEvent {
  blockNumber      Int
  transactionHash  String
  transactionIndex Int
  logIndex         Int
  propnum          Int
  epoch            Int
  starttimes       Int[]

  @@id([blockNumber, transactionHash, transactionIndex, logIndex])
}

model OracleSchedulePostedEvent {
  blockNumber      Int
  transactionHash  String
  transactionIndex Int
  logIndex         Int
  propnum          Int
  epoch            Int
  sched            Int[]

  @@id([blockNumber, transactionHash, transactionIndex, logIndex])
}

model OracleFundingEvent {
  blockNumber      Int
  transactionHash  String
  transactionIndex Int
  logIndex         Int
  tokensChange     BigInt
  etherChange      BigInt
  transactor       String

  @@id([blockNumber, transactionHash, transactionIndex, logIndex])
}

enum BlockchainSyncTypes {
  TokenTransferFilter
  TokenBurnFilter
  TokenMintFilter
  TokenApprovalFilter
  BettingBetRecordFilter
  BettingOfferRecordFilter
  BettingFundingFilter
  OracleResultsPostedFilter
  OracleDecOddsPostedFilter
  OracleVoteOutcomeFilter
  OracleBetDataPostedFilter
  OracleParamsPostedFilter
  OraclePausePostedFilter
  OracleStartTimesPostedFilter
  OracleSchedulePostedFilter
  OracleFundingFilter
}

model BlockchainSync {
  blockNumber      Int
  transactionHash  String
  transactionIndex Int
  logIndex         Int
  type             BlockchainSyncTypes

  @@id([blockNumber, transactionHash, transactionIndex, logIndex])
}
